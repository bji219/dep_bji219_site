---
title:  "PiCamera"
date:   2022-09-28 15:33:33 -0500
# categories: jekyll update
permalink: "/PiCamera/"
image: assets/Images/PiCamera/PiCam.jpeg
excerpt: Experimenting with Picamera and HTML
---

# PiCamera Potential
I recently came across a [post](https://opensource.com/article/20/1/object-tracking-camera-raspberry-pi) by Leigh Johnson about using open source machine learning code (Tensor Flow) to create a real-time object tracking camera using Raspberry Pi. The camera would use a custom python library and PID-controller concepts to swivel and track the desired object. I was intrigued so I purchased some parts to play around with! 

![picamera colorful](/assets/Images/PiCamera/PiCam.jpeg)

## Bill of Materials
- Raspberry Pi 3B
- [PiCamera Module](https://www.adafruit.com/product/3099?src=raspberrypi&gclid=CjwKCAjw4c-ZBhAEEiwAZ105RQYTson1N-4_wBYCs08tyqZqHpVh7kezYCsMkTOsnwItVv3hctzjPRoCqHMQAvD_BwE)
- [Pan-Tilt HAT](https://shop.pimoroni.com/products/pan-tilt-hat?variant=22408353287) by Pimoroni
- Extra-long ribbon cable
- LED light bar for the HAT

# Object Tracking and "Security Camera" Livestream
I decided to integrate a few ideas into one. First, I wanted to be able to access the camera over the internet and be able to pan and tilt the camera in any manner using the keyboard or input links on the website. Second, I wanted to integrate the concepts of object tracking and machine learning. Lastly, I would want the feed of the camera to be a livestream accessible to my friends or family who would want to track something (i.e. the family cats).

## Pan Tilt Control
The first step was assembly the Pan-Tilt HAT and testing the functionality on the raspi. Since I normally use the headless configuration (SSH control) for the raspberry pi I needed to troubleshoot the picamera python module locally by connecting a monitor and keyboard. I used the default python code from the picamera library to make sure the servos were in working order. 

## Access Raspberry Pi Stream over Internet
Next, I wanted to be able to view the output from the picamera without needing an HDMI cable and having to hardwire connect to the raspi every time. To do this, I started by making the stream available on my local internet connection by following a great [tutorial](https://blog.miguelgrinberg.com/post/video-streaming-with-flask) by Miguel Grinberg. This method involves creating a [Flask](https://en.wikipedia.org/wiki/Flask_(web_framework) .jpeg stream of the picamera and making it available on an html webpage. By cobbling together some python code from Miguel and customizing my index.html page, I came up with the following:

### Python code
```python

```

### index.html page
```html
<html>
  <head>
    <title>Brendan's Raspberry Pi Livestream</title>
      <link type="text/css" rel="stylesheet" href= "{{ url_for('static', filename='style.css') }}"/>
  </head>
  <body>
    <h1>Raspberry Pi PanTilt Feed</h1>
    <img src="{{ url_for('video_feed') }}">
    <h2><a href="/pan/+"class="button">LEFT</a> [ {{ panServoAngle }} ] <a href="/pan/-"class="button">RIGHT</a></h2>
    <h2><a href="/tilt/-"class="button">UP</a> [ {{ tiltServoAngle }} ] <a href="/tilt/+"class="button">DOWN</a></h2>
    <form action="/increment" method="POST">
      <label for="increment">Increment:</label>
      <input id="increment" name="increment" type="number" step="1" min="1" max="30">
      <input type="submit" value="Submit">
    </form>
    <br />
    <a href="/on_light" class="button">Lights On</a>
    <a href="/off_light" class="button">Lights Off</a>
    <br />
    <br />
    <a href="/on_patrol" class="button">Sweep On</a>
    <a href="/off_patrol" class="button">Sweep Off</a>
  </body>
</html>
```
### The End Result! 
![web page](/assets/Images/PiCamera/WebPage.png)

## ML and Object Tracking
